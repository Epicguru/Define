name: Build & Test

on:
  pull_request:
    branches: [ master, develop ]

permissions:
  contents: read
  actions: read
  checks: write
  pull-requests: write

jobs:
  build:

    # TODO split test and publish!

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 8.0.x

    # This global tool is required to build Monogame content which is used in a test.
    - name: Install mgcb
      run: dotnet tool install dotnet-mgcb --global

    # Grab dependencies like NuGet packages.
    - name: Restore dependencies
      run: dotnet restore
      
    # Build and test in debug mode:
    - name: Test
      run: dotnet test --verbosity normal --logger "trx;LogFileName=test-results.trx" --no-restore --collect:"XPlat Code Coverage"

    # Generate a test report.
    - name: Test Report
      uses: dorny/test-reporter@v1.7.0
      if: success() || failure()    # run this step even if previous step failed
      with:
        name: Generate test report            # Name of the check run which will be created
        path: Define*Tests/TestResults/test-results.trx # Path to test results. Note the wildcard.
        reporter: dotnet-trx        # Format of test results

    # Generate code coverage report.
    - name: Code Coverage Report
      uses: irongut/CodeCoverageSummary@v1.3.0
      with:
        filename: Define*Tests/TestResults/**/coverage.cobertura.xml
        badge: true
        fail_below_min: true
        format: markdown
        hide_branch_rate: false
        hide_complexity: true
        indicators: true
        output: both
        thresholds: '60 80'

    # Post the results of the previous step as a PR comment.
    - name: Add Coverage PR Comment
      uses: marocchino/sticky-pull-request-comment@v2.8.0
      if: github.event_name == 'pull_request'
      with:
        recreate: true
        path: code-coverage-results.md
